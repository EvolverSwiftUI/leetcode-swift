class UnionFind {

    // Solution by Sergey Leschev

    // 928. Minimize Malware Spread II
    // You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.
    // Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.
    // Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.
    // We will remove exactly one node from initial, completely removing it and any connections from this node to any other node.
    // Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

    // Example 1:
    // Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
    // Output: 0

    // Example 2:
    // Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
    // Output: 1

    // Example 3:
    // Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
    // Output: 1

    // Constraints:
    // n == graph.length
    // n == graph[i].length
    // 2 <= n <= 300
    // graph[i][j] is 0 or 1.
    // graph[i][j] == graph[j][i]
    // graph[i][i] == 1
    // 1 <= initial.length < n
    // 0 <= initial[i] <= n - 1
    // All the integers in initial are unique.

    var parent: [Int]

    init(_ size: Int) { parent = [Int](0..<size) }

    func find(_ node: Int) -> Int {
        guard parent[node] != node else { return node }
        var current = node
        var temp = node

        while parent[current] != current { current = parent[current] }
        while parent[temp] != current { (parent[temp], temp) = (current, parent[temp]) }
        return current
    }

    func connected(_ node1: Int, _ node2: Int) -> Bool { find(node1) == find(node2) }
    func join(_ node1: Int, _ node2: Int) { parent[find(node1)] = find(node2) }
}

class Solution {
    func minMalwareSpread(_ graph: [[Int]], _ initial: [Int]) -> Int {
        let size = graph.count
        let uf = UnionFind(size)
        var compoments = [Int](repeating: 0, count: size)
        var map = [Int: [Int]]()
        var ans = (node: -1, count: Int.min)

        for r in 0..<size {
            for c in (r + 1)..<size {
                if graph[r][c] == 1 { uf.join(r, c) }
            }
        }

        for node in 0..<size { compoments[uf.find(node)] += 1 }

        for node in initial {
            let p = uf.find(node)
            if nil == map[p] { map[p] = [] }
            map[p]?.append(node)
        }

        func getInfectedNodesCountAfter(remove source: Int, _ infectedSources: [Int]) -> Int {
            var visited = [Bool](repeating: false, count: size)
            var willInfected = Set<Int>(infectedSources)

            func dfs(_ root: Int) {
                for next in 0..<size {
                    if graph[root][next] == 1 && next != source && !visited[next] {
                        visited[next] = true
                        willInfected.insert(next)
                        dfs(next)
                    }
                }
            }

            for infectedSource in infectedSources {
                if !visited[infectedSource] && infectedSource != source {
                    visited[infectedSource] = true
                    dfs(infectedSource)
                }
            }
            return willInfected.count
        }

        for (root, infectedSources) in map {
            if infectedSources.count == 1 {
                let protectCount = compoments[root] - 1
                if protectCount > ans.count {
                    ans = (infectedSources[0], protectCount)
                } else if protectCount == ans.count && ans.node > infectedSources[0] {
                    ans.node = infectedSources[0]
                }
            } else {
                for source in infectedSources {
                    let protectCount =
                        compoments[root]
                        - getInfectedNodesCountAfter(remove: source, infectedSources)
                    if protectCount > ans.count {
                        ans = (source, protectCount)
                    } else if protectCount == ans.count && ans.node > source {
                        ans.node = source
                    }
                }
            }
        }

        return ans.node
    }

}
